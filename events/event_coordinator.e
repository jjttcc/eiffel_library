indexing
	description:
		"An event coordinator that uses event generators to generate events %
		%and passes a queue of the generated events to a dispatcher"
	status: "Copyright 1998 - 2000: Jim Cochrane and others, see file forum.txt"
	date: "$Date$";
	revision: "$Revision$"

deferred class

	EVENT_COORDINATOR

feature -- Access

	event_generators: LINEAR [EVENT_GENERATOR]
			-- Generators of events to be dispatched

	dispatcher: EVENT_DISPATCHER
			-- Entity whose job is to dispatch generated events

feature -- Basic operations

	execute is
		do
			create_queue
			generate_events
			if not event_queue.empty then
				dispatcher.set_event_queue (event_queue)
				dispatcher.execute
			end
		end

feature {NONE} -- Implementation

	event_queue: QUEUE [EVENT]

feature {NONE} -- Hook methods

	create_queue is
		do
			!LINKED_QUEUE [EVENT]!event_queue.make
		ensure
			event_queue /= Void
		end

	generate_events is
		require
			queue_not_void: event_queue /= Void
		deferred
		end

	initialize (g: EVENT_GENERATOR) is
		require
			g_not_void: g /= Void
		do
		end

feature {NONE} -- Implementation

	execute_event_generators is
			-- For each element, e, of event_generators, call e.execute
			-- and append all events generated by e to event_queue.
			-- This routine is not called by any routine in this class.
			-- It is a convenience function likely to be useful to
			-- descendants.
		require
			generators_not_void: event_generators /= Void
		do
			from
				event_generators.start
			until
				event_generators.exhausted
			loop
				initialize (event_generators.item)
				event_generators.item.execute
				event_queue.append (event_generators.item.product)
				event_generators.forth
			end
		end

invariant

	dispatcher_not_void: dispatcher /= Void
	event_generators_not_void: event_generators /= Void

end -- class EVENT_COORDINATOR
